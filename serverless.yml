service: serverless-nodejs-api
frameworkVersion: '3'
useDotenv: true

provider:
  name: aws
  runtime: nodejs20.x
  environment:
    DEBUG: ${env:DEBUG, 0}
    STAGE: ${env:STAGE, "prod"}
    # The WebSocket API endpoint will be generated by Serverless and useful for postToConnection later
    WEBSOCKET_API_ENDPOINT: !Join ['', ['https://', !Ref WebsocketsApi, '.execute-api.us-east-1.amazonaws.com/prod']]
  vpc:
    securityGroupIds:
      - sg-0718a369fbe6a8388 # <-- Replace with your Lambda's SG ID
    subnetIds:
      - subnet-0bd9795b297ae044b # us-east-1a public subnet
      - subnet-038950b43181b3247 # us-east-1b public subnet
      - subnet-04f4c19f738fab302 # us-east-1c public subnet
      - subnet-0979ce1422c2f95a6
      - subnet-0421b49ff8f5d7bd9
      - subnet-0b96cf2dd6aee5003
  iam:
    role:
      name: serverless-my-ssm-role-${env:STAGE, "prod"}
      statements:
        - Effect: 'Allow'
          Resource: '*'
          Action:
            - "ssm:GetParameter"
            - "ssm:GetParameters"
            - "ssm:GetParametersByPath"
            - "ssm:GetParameterHistory"
            - "ssm:DescribeParameters"
        # Crucial permission to allow Lambdas to send messages back to clients
        - Effect: 'Allow'
          Action:
            - 'execute-api:ManageConnections'
          Resource:
            # This grants permission to manage connections for your WebSocket API.
            # The '*' for the connection ID part means it applies to all connections.
            - 'arn:aws:execute-api:us-east-1:121958812372:*/prod/@connections/*'

functions:
  automationApi:
    handler: src/automation.startEc2Instance
    events:
      - httpApi:
          path: /api/startEc2Instance
          method: post
  leadsApi:
    handler: src/index.leadsHandler
    events:
      - httpApi:
          path: /api/leads
          method: get
      - httpApi:
          path: /api/leads
          method: post

  # WebSocket Functions - these are core for the connection lifecycle
  connectHandler:
    handler: src/websocket.connectHandler # Your Lambda function for $connect route
    events:
      - websocket:
          route: $connect # Special route for new WebSocket connections
  
  disconnectHandler:
    handler: src/websocket.disconnectHandler # Your Lambda function for $disconnect route
    events:
      - websocket:
          route: $disconnect # Special route for disconnected WebSocket connections

  # defaultHandler:
  #   handler: src/websocket.defaultHandler # Your Lambda function for $default route
  #   events:
  #     - websocket:
  #         route: $default # Catch-all for unhandled messages (any message without a specific 'action')

  # # Optional: Example of a custom WebSocket route for handling messages from the client
  sendMessage:
    handler: src/websocket.sendMessage
    events:
      - websocket:
          route: sendMessage # This function will be triggered if the client sends a message like { "action": "sendMessage", "data": "hello" }

custom:
  dotenv:
    path: .env
    exclude:
      - AWS_ACCESS_KEY_ID
      - AWS_SECRET_ACCESS_KEY
      - AWS_SESSION_TOKEN
      - DATABASE_URL

plugins:
  - serverless-offline
  - serverless-dotenv-plugin

# No 'resources' block needed for DynamoDB table in this minimal setup.